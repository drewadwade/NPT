Windows

	whoami /all

	qwinsta 		
		see who is currently logged in

	net user /domain
		see all user accounts for the domain

		net user <username> /domain
			see all groups a user is member of

	net group /domain
		see all groups for the domain

		net group "Domain Admins" /domain
			see all Domain Admins for domain

		net group "Enterprise Admins" /domain
			see all Enterprise Admins for domain


	netdiscover -i <interface>
		see all machines on the network

	gpresult /z

	tasklist /v

	arp -a

	netstat -ano

	net use

	wmic logicaldisk get name

	ipconfig /all

	start /b dir /b /s /a ^> bob.txt

	ipconfig /displaydns




	



PowerShell
	Host discovery using mass DNS reverse lookup
		$net = "10.10.1."
		0..255 | foreach {$r=(Resolve-DNSname -ErrorAction SilentlyContinue $net$_ | ft NameHost -HideTableHeaders | Out-String).trim().replace("\s+","").replace("`r","").replace("`n"," "); Write-Output "$net$_ $r"} | tee ip_hostname.txt

	Port scan a host for interesting ports
		$ports = "21 22 23 25 53 80 88 111 139 389 443 445 873 1099 1433 1521 1723 2049 2100 2121 3299 3306 3389 3632 4369 5038 5060 5432 5555 5900 5985 6000 6379 6667 8000 8080 8443 9200 27017"
		$ip = "10.10.15.232"
		$ports.split(" ") | % {echo ((new-object Net.Sockets.TcpClient).Connect($ip,$_)) "Port $_ is open on $ip"} 2>$null 

	Port scan a network for a single port (port-sweep)
		$port = 22
		$net = "10.10.0."
		0..255 | foreach { echo ((new-object Net.Sockets.TcpClient).Connect($net+$_,$port)) "Port $port is open on $net$_"} 2>$null

	Get SID of the current user
	([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value

	Check if we are running with elevated (admin) privileges
	If (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) { echo "yes"; } else { echo "no"; }

	List installed antivirus (AV) products
	Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntiVirusProduct



SMB Session Enumeration against DC
	who else has sessions with SMB share and their IP

	JoeWare's NetSess
		NetSess.exe <DC_hostname>


Show wifi password in plaintext 

	netsh wlan show profile name=<SSID> key=clear
		req's admin rights

	Win+R—> ncpa.cpl —> DoubleClick_Wifi Name —> Under General —> Wireless Properties —>Security —>Show Characters


Logs
	Linux
		/var/log
			auth.log
				interactive and non-interactive log
		login history
			wtmp
				user logins and system reboots
				last
			btmp 
				failed logins - can contain user passwords if accidentally entered as username
				lastb
			lastlog
				last login for each user
				lastlog

		turn on kernel-level activity monitor (auditd)
			key-logging
			ausearch -if /var/log/audit -c <command_eg_useradd>
			aureport
			aulast
			aulastlog


PowerView
	put PowerView.ps1 on target machine
		https://github.com/PowerShellMafia/PowerSploit
			PowerView.ps1 is in Recon folder
	powershell -ep bypass
	. .\powerview.ps1

	basic network info
		get-netdomain
	domain controller(s) info
		get-netdomaincontroller
	domain policies
		get-domainpolicy
	domain password policies
		(get-domainpolicy)."system access"
	domain users
		get-netuser 					detailed
		get-netuser | select cn 		just common names
	user properties
		get-userproperty							property list
		get-userproperty -Properties <property>  	property values
	check for honey account (no logons)
		get-userproperty -Properties logoncount
	domain computers
		get-netcomputer -fulldata		detailed
		get-netcomputer					just computer names
	domain groups
		get-netgroup
	domain group members
		get-netgroupmember -groupname <group>
	find network shares
		invoke-sharefinder
	group policies
		get-netgpo

	PowerView Cheat Sheet
		https://gist.github.com/HarmJ0y/184f9822b195c52dd50c379ed3117993


BloodHound
	Run neo4j
		neo4j console
	Open browser to URL provided by neo4j
	Login to neo4j		
		neo4j:password
	New shell running bloodhound
		bloodhound
		Login to bloodhound
	Put SharpHound.ps1 on target machine
		https://github.com/BlooHoundAD/BloodHound/blob/master/Ingestors/SharpHound.ps1
	Run ingestor on target machine
		powershell -ep bypass
		. .\sharphound.ps1
		invoke-bloodhound -collectionmethod all -domain <domain> -zipfilename <output file name>.zip
	Copy file to machine running bloodhound
	Select Upload data and select zip file
	Click hamburger menu to view results
	Select Queries for prebuilt queries or build own

BloodHound.py
	github.com/fox-it/bloodhound.py






